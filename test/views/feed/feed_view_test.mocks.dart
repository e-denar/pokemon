// Mocks generated by Mockito 5.3.0 from annotations
// in pokemon/test/views/feed/feed_view_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;

import 'package:flutter/foundation.dart' as _i2;
import 'package:flutter/src/widgets/navigator.dart' as _i7;
import 'package:hive_flutter/hive_flutter.dart' as _i6;
import 'package:mockito/mockito.dart' as _i1;
import 'package:pokemon/data/models/pokemon_model.dart' as _i5;
import 'package:pokemon/data/repositories/pokemon_hive_repository.dart' as _i3;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeValueListenable_0<T> extends _i1.SmartFake
    implements _i2.ValueListenable<T> {
  _FakeValueListenable_0(Object parent, Invocation parentInvocation)
      : super(parent, parentInvocation);
}

/// A class which mocks [PokemonHiveRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockPokemonHiveRepository extends _i1.Mock
    implements _i3.PokemonHiveRepository {
  MockPokemonHiveRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<List<_i5.PokemonModel>> fetchPokemons({int? offset = 0}) => (super
      .noSuchMethod(Invocation.method(#fetchPokemons, [], {#offset: offset}),
          returnValue: _i4.Future<List<_i5.PokemonModel>>.value(
              <_i5.PokemonModel>[])) as _i4.Future<List<_i5.PokemonModel>>);
  @override
  _i4.Future<List<_i5.PokemonModel>> search(String? text) =>
      (super.noSuchMethod(Invocation.method(#search, [text]),
          returnValue: _i4.Future<List<_i5.PokemonModel>>.value(
              <_i5.PokemonModel>[])) as _i4.Future<List<_i5.PokemonModel>>);
  @override
  _i4.Future<void> delete(dynamic key) => (super.noSuchMethod(
      Invocation.method(#delete, [key]),
      returnValue: _i4.Future<void>.value(),
      returnValueForMissingStub: _i4.Future<void>.value()) as _i4.Future<void>);
  @override
  _i4.Future<_i5.PokemonModel?> get(String? key) =>
      (super.noSuchMethod(Invocation.method(#get, [key]),
              returnValue: _i4.Future<_i5.PokemonModel?>.value())
          as _i4.Future<_i5.PokemonModel?>);
  @override
  _i4.Future<_i2.ValueListenable<_i6.Box<_i5.PokemonModel>>> getListenable(
          {dynamic key}) =>
      (super.noSuchMethod(Invocation.method(#getListenable, [], {#key: key}),
          returnValue:
              _i4.Future<_i2.ValueListenable<_i6.Box<_i5.PokemonModel>>>.value(
                  _FakeValueListenable_0<_i6.Box<_i5.PokemonModel>>(this,
                      Invocation.method(#getListenable, [], {#key: key})))) as _i4
          .Future<_i2.ValueListenable<_i6.Box<_i5.PokemonModel>>>);
  @override
  _i4.Future<List<_i5.PokemonModel>> getAll() => (super.noSuchMethod(
          Invocation.method(#getAll, []),
          returnValue:
              _i4.Future<List<_i5.PokemonModel>>.value(<_i5.PokemonModel>[]))
      as _i4.Future<List<_i5.PokemonModel>>);
  @override
  _i4.Future<_i5.PokemonModel?> firstWhere(
          bool Function(_i5.PokemonModel)? test) =>
      (super.noSuchMethod(Invocation.method(#firstWhere, [test]),
              returnValue: _i4.Future<_i5.PokemonModel?>.value())
          as _i4.Future<_i5.PokemonModel?>);
  @override
  _i4.Future<List<_i5.PokemonModel>> where(
          bool Function(_i5.PokemonModel)? test) =>
      (super.noSuchMethod(Invocation.method(#where, [test]),
          returnValue: _i4.Future<List<_i5.PokemonModel>>.value(
              <_i5.PokemonModel>[])) as _i4.Future<List<_i5.PokemonModel>>);
  @override
  _i4.Future<void> insert(_i5.PokemonModel? row) => (super.noSuchMethod(
      Invocation.method(#insert, [row]),
      returnValue: _i4.Future<void>.value(),
      returnValueForMissingStub: _i4.Future<void>.value()) as _i4.Future<void>);
  @override
  _i4.Future<void> insertAll(List<_i5.PokemonModel>? rows) =>
      (super.noSuchMethod(Invocation.method(#insertAll, [rows]),
              returnValue: _i4.Future<void>.value(),
              returnValueForMissingStub: _i4.Future<void>.value())
          as _i4.Future<void>);
  @override
  _i4.Future<void> update(_i5.PokemonModel? row) => (super.noSuchMethod(
      Invocation.method(#update, [row]),
      returnValue: _i4.Future<void>.value(),
      returnValueForMissingStub: _i4.Future<void>.value()) as _i4.Future<void>);
  @override
  _i4.Future<void> deleteAll() => (super.noSuchMethod(
      Invocation.method(#deleteAll, []),
      returnValue: _i4.Future<void>.value(),
      returnValueForMissingStub: _i4.Future<void>.value()) as _i4.Future<void>);
}

/// A class which mocks [Box].
///
/// See the documentation for Mockito's code generation for more information.
class MockBox<E> extends _i1.Mock implements _i6.Box<E> {
  MockBox() {
    _i1.throwOnMissingStub(this);
  }

  @override
  Iterable<E> get values =>
      (super.noSuchMethod(Invocation.getter(#values), returnValue: <E>[])
          as Iterable<E>);
  @override
  String get name =>
      (super.noSuchMethod(Invocation.getter(#name), returnValue: '') as String);
  @override
  bool get isOpen =>
      (super.noSuchMethod(Invocation.getter(#isOpen), returnValue: false)
          as bool);
  @override
  bool get lazy =>
      (super.noSuchMethod(Invocation.getter(#lazy), returnValue: false)
          as bool);
  @override
  Iterable<dynamic> get keys =>
      (super.noSuchMethod(Invocation.getter(#keys), returnValue: <dynamic>[])
          as Iterable<dynamic>);
  @override
  int get length =>
      (super.noSuchMethod(Invocation.getter(#length), returnValue: 0) as int);
  @override
  bool get isEmpty =>
      (super.noSuchMethod(Invocation.getter(#isEmpty), returnValue: false)
          as bool);
  @override
  bool get isNotEmpty =>
      (super.noSuchMethod(Invocation.getter(#isNotEmpty), returnValue: false)
          as bool);
  @override
  Iterable<E> valuesBetween({dynamic startKey, dynamic endKey}) =>
      (super.noSuchMethod(
          Invocation.method(
              #valuesBetween, [], {#startKey: startKey, #endKey: endKey}),
          returnValue: <E>[]) as Iterable<E>);
  @override
  E? getAt(int? index) =>
      (super.noSuchMethod(Invocation.method(#getAt, [index])) as E?);
  @override
  Map<dynamic, E> toMap() => (super.noSuchMethod(Invocation.method(#toMap, []),
      returnValue: <dynamic, E>{}) as Map<dynamic, E>);
  @override
  dynamic keyAt(int? index) =>
      super.noSuchMethod(Invocation.method(#keyAt, [index]));
  @override
  _i4.Stream<_i6.BoxEvent> watch({dynamic key}) =>
      (super.noSuchMethod(Invocation.method(#watch, [], {#key: key}),
              returnValue: _i4.Stream<_i6.BoxEvent>.empty())
          as _i4.Stream<_i6.BoxEvent>);
  @override
  bool containsKey(dynamic key) =>
      (super.noSuchMethod(Invocation.method(#containsKey, [key]),
          returnValue: false) as bool);
  @override
  _i4.Future<void> put(dynamic key, E? value) => (super.noSuchMethod(
      Invocation.method(#put, [key, value]),
      returnValue: _i4.Future<void>.value(),
      returnValueForMissingStub: _i4.Future<void>.value()) as _i4.Future<void>);
  @override
  _i4.Future<void> putAt(int? index, E? value) => (super.noSuchMethod(
      Invocation.method(#putAt, [index, value]),
      returnValue: _i4.Future<void>.value(),
      returnValueForMissingStub: _i4.Future<void>.value()) as _i4.Future<void>);
  @override
  _i4.Future<void> putAll(Map<dynamic, E>? entries) => (super.noSuchMethod(
      Invocation.method(#putAll, [entries]),
      returnValue: _i4.Future<void>.value(),
      returnValueForMissingStub: _i4.Future<void>.value()) as _i4.Future<void>);
  @override
  _i4.Future<int> add(E? value) =>
      (super.noSuchMethod(Invocation.method(#add, [value]),
          returnValue: _i4.Future<int>.value(0)) as _i4.Future<int>);
  @override
  _i4.Future<Iterable<int>> addAll(Iterable<E>? values) =>
      (super.noSuchMethod(Invocation.method(#addAll, [values]),
              returnValue: _i4.Future<Iterable<int>>.value(<int>[]))
          as _i4.Future<Iterable<int>>);
  @override
  _i4.Future<void> delete(dynamic key) => (super.noSuchMethod(
      Invocation.method(#delete, [key]),
      returnValue: _i4.Future<void>.value(),
      returnValueForMissingStub: _i4.Future<void>.value()) as _i4.Future<void>);
  @override
  _i4.Future<void> deleteAt(int? index) => (super.noSuchMethod(
      Invocation.method(#deleteAt, [index]),
      returnValue: _i4.Future<void>.value(),
      returnValueForMissingStub: _i4.Future<void>.value()) as _i4.Future<void>);
  @override
  _i4.Future<void> deleteAll(Iterable<dynamic>? keys) => (super.noSuchMethod(
      Invocation.method(#deleteAll, [keys]),
      returnValue: _i4.Future<void>.value(),
      returnValueForMissingStub: _i4.Future<void>.value()) as _i4.Future<void>);
  @override
  _i4.Future<void> compact() => (super.noSuchMethod(
      Invocation.method(#compact, []),
      returnValue: _i4.Future<void>.value(),
      returnValueForMissingStub: _i4.Future<void>.value()) as _i4.Future<void>);
  @override
  _i4.Future<int> clear() => (super.noSuchMethod(Invocation.method(#clear, []),
      returnValue: _i4.Future<int>.value(0)) as _i4.Future<int>);
  @override
  _i4.Future<void> close() => (super.noSuchMethod(Invocation.method(#close, []),
      returnValue: _i4.Future<void>.value(),
      returnValueForMissingStub: _i4.Future<void>.value()) as _i4.Future<void>);
  @override
  _i4.Future<void> deleteFromDisk() => (super.noSuchMethod(
      Invocation.method(#deleteFromDisk, []),
      returnValue: _i4.Future<void>.value(),
      returnValueForMissingStub: _i4.Future<void>.value()) as _i4.Future<void>);
  @override
  _i4.Future<void> flush() => (super.noSuchMethod(Invocation.method(#flush, []),
      returnValue: _i4.Future<void>.value(),
      returnValueForMissingStub: _i4.Future<void>.value()) as _i4.Future<void>);
}

/// A class which mocks [NavigatorObserver].
///
/// See the documentation for Mockito's code generation for more information.
class MockNavigatorObserver extends _i1.Mock implements _i7.NavigatorObserver {
  @override
  void didPush(_i7.Route<dynamic>? route, _i7.Route<dynamic>? previousRoute) =>
      super.noSuchMethod(Invocation.method(#didPush, [route, previousRoute]),
          returnValueForMissingStub: null);
  @override
  void didPop(_i7.Route<dynamic>? route, _i7.Route<dynamic>? previousRoute) =>
      super.noSuchMethod(Invocation.method(#didPop, [route, previousRoute]),
          returnValueForMissingStub: null);
  @override
  void didRemove(
          _i7.Route<dynamic>? route, _i7.Route<dynamic>? previousRoute) =>
      super.noSuchMethod(Invocation.method(#didRemove, [route, previousRoute]),
          returnValueForMissingStub: null);
  @override
  void didReplace(
          {_i7.Route<dynamic>? newRoute, _i7.Route<dynamic>? oldRoute}) =>
      super.noSuchMethod(
          Invocation.method(
              #didReplace, [], {#newRoute: newRoute, #oldRoute: oldRoute}),
          returnValueForMissingStub: null);
  @override
  void didStartUserGesture(
          _i7.Route<dynamic>? route, _i7.Route<dynamic>? previousRoute) =>
      super.noSuchMethod(
          Invocation.method(#didStartUserGesture, [route, previousRoute]),
          returnValueForMissingStub: null);
  @override
  void didStopUserGesture() =>
      super.noSuchMethod(Invocation.method(#didStopUserGesture, []),
          returnValueForMissingStub: null);
}
